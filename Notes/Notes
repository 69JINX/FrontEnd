ENV :=

The .env file is a simple text file that stores environment variables for an application. It's commonly used to store sensitive configuration settings, such as API keys, database credentials, and other values that might vary across different environments (development, staging, production). By keeping these settings in a separate file, they can be managed more easily and securely, and the code itself remains cleaner. 
Key-Value Pairs:
The file contains key-value pairs, where the key is the name of the environment variable, and the value is its corresponding value. 
Security:
.env files are typically excluded from version control systems (e.g., Git) to prevent accidental exposure of sensitive information. 
Flexibility:
They allow for easy adaptation to different environments by simply modifying the values in the .env file. 
Database Credentials: DB_HOST=localhost, DB_USER=myuser, DB_PASSWORD=mypassword
API Keys: API_KEY=your_api_key, GOOGLE_API_KEY=your_google_api_key. 
Application Settings: DEBUG=True, SECRET_KEY=your_secret_key

Nodejs Implementation : 
1. npm i dotenv
2. in the main server.js file (where the port is running), import dotenv page require('dotenv').config(); This command will help access the env variables in all other files because all files are run throught server.js
3. Now whereever you want to use the variables defined in the .env file, just use process.env.VARIABLE

Note : Sometimes, the file doesn't recognize what process.env.VARIABLE is, for that import the dotenv package in that specific file again 

The process object is a Node.js object. It provides information about, and control over, the current Node.js process. It is a global object, meaning it is always available in Node.js applications without requiring an import statement. While Node.js uses JavaScript as its language, the process object itself is not a standard JavaScript object available in browser environments. It's specific to the Node.js runtime environment. 
more about process object : https://github.com/69JINX/FrontEnd/blob/main/Notes/Notes_Pic/dotenv-and-global-access.png


Serve files(assets) from server : https://github.com/69JINX/FrontEnd/blob/main/Notes/Notes_Pic/serve-files-from-server.png
eg: (https//your-domain.com/files/image.jpg)


express.json()

app.use(express.json());
express.json() is a built-in middleware function in Express.js that parses incoming requests with JSON payloads. It handles JSON data sent from clients and makes it accessible within your server-side application. This allows you to easily work with data sent by clients, especially when building RESTful APIs that use JSON. 

Here's a more detailed explanation:
Parsing JSON:
When a client sends data to your server in the form of JSON, express.json() parses this JSON data and attaches it to the req.body property of the request object. 
Accessibility:
This means you can access the parsed JSON data within your route handlers using req.body. For example, req.body.name would give you access to the 'name' field in the JSON data sent from the client. 
Middleware Function:
express.json() is a middleware function, meaning it's a piece of code that can modify the request object or respond to a request. It's typically used with app.use() to apply it globally or with individual routes for more targeted parsing. 
body-parser Dependency:
Historically, Express.js relied on the body-parser library for parsing request bodies. However, in newer versions of Express, express.json() is now a direct part of the framework and essentially replaces the need for body-parser when dealing with JSON data. 

const express = require('express');
const app = express();

// Use express.json() as middleware
app.use(express.json());

app.post('/api/data', (req, res) => {
  // req.body now contains the parsed JSON data
  const jsonData = req.body;
  console.log(jsonData);  // Output: { name: 'John', age: 30 }
  res.json({ message: 'Data received successfully' });
});

app.listen(3000, () => {
  console.log('Server is running on port 3000');
});

In this example, any request sent to /api/data with a JSON payload will have its data parsed and made available in req.body. This makes it easy to access and work with the data within the route handler. 


CORS (cross origin resource sharing)
It is a security feature built into web browsers that controls how resources on a server can be requested from another domain (or "origin") outside the one the resource originated from.
CORS is a protocol that uses HTTP headers to tell browsers whether a specific web application running at one origin is allowed to access resources from a different origin.
Example scenario:
1. Your frontend is hosted at https://example-frontend.com.
2. Your backend API is hosted at https://api.example-backend.com.
3. The browser blocks API requests from frontend to backend unless the backend includes proper CORS headers (e.g., Access-Control-Allow-Origin).

✅ Why do we need CORS in the backend?
Security: Prevent unauthorized websites from reading sensitive data from your server.
Controlled Sharing: Only allow access to known and trusted frontend domains.
Avoid Same-Origin Policy issues: Browsers enforce the Same-Origin Policy, which blocks cross-origin requests by default for security.
CORS allows safe and secure controlled exceptions to this rule.

app.use(cors()); in Express:
This line tells your Express.js app to enable CORS (Cross-Origin Resource Sharing) with default settings.

🔍 What it does exactly:
Allows requests from any origin (Access-Control-Allow-Origin: *)
Does not allow credentials (like cookies, sessions, or Authorization headers)

Tip : to restrict public usage of your api and only allow defined frontend domain to access your backend APIs : 
app.use(cors({
  origin: 'http://your-frontend.com',
  methods: ['GET', 'HEAD', 'PUT'], // only these methods will be allowed, all the rest methods PATCH, POST, DELETE will be blocked
}));

When you use: app.use(cors());
It's shorthand for: 
app.use(cors({
  origin: '*',
  methods: ['GET', 'HEAD', 'PUT', PATCH, POST, DELETE'],
}));

full detailed discussion : https://chatgpt.com/c/6821960c-80d8-8012-8d48-0b5dc3da0684
https://www.geeksforgeeks.org/cross-origin-resource-sharing-cors/
https://www.geeksforgeeks.org/http-access-control-cors/
https://developer.mozilla.org/en-US/docs/Web
https://www.youtube.com/watch?v=E6jgEtj-UjI


JWT (jsonwebtocken)
1. user login with his credentials
2. authenticate his credentials(email-password) from backend
3. if authenticated, fetch user data from db and convert that user data to jwt token and send to frontend
   converting data to jwt token : 
   > npm i jsonwebtoken
   const jwt = require('jsonwebtoken')
   jwt.sign(dataToEncrypt, process.env.JWT_KEY, { expiresIn: '7d' },(error, token)=>{ 
   if(error) return res.status(500).json({message:'try after some time!'});
   res.status(200).json({message:'success',token})
   })
   ExpiresIn Eg: 60, "2 days", "10h", "7d". A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default ("120" is equal to "120ms").
   https://www.npmjs.com/package/jsonwebtoken#:~:text=numeric%20value
4. frontend get the token and store it in cookies.
5. backend create a verifyToken api to verify the token
6. frontend send token in verifyToken api in the headers
   const res = await axios.post('https://localhost:4000/verifyToken',{},{
   headers:{
   'Authorization':jwtToken
   }})
7. Backend verify the token and send the actual user data.
   jwt.verify(req.headers.authorization, process.env.JWT_KEY,(error, decoded)=>{
    if(error) res.status(401).json({message:'please login again!'})
    res.status(200).json({message:'success',data:decoded})
   })
   Error : After receiving the error(invalid token, expired token), the frontend should log out the user and redirect to login page and generate the jwt again (from step 1)
   Success : store encrypted userdata in context that was send from verifyToken api
8. The actual user data(decoded) will be saved in the context.
9. The jwt token will stay till its expiry date in the cookie.
10. On Every refresh, the verifyToken api is called with the jwt token (to convert token to userdata)
	
Check authentication on every protected API route in backend with auth middleware, jwt will be send with header/cookie from frontend :

// middleware/auth.js
const jwt = require('jsonwebtoken');

function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader?.split(' ')[1]; // Bearer <token>

  if (!token) return res.status(401).json({ message: 'No token provided' });

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: 'Invalid token' });

    req.user = user; // Store user info in req for use in routes
    next();
  });
}

module.exports = authenticateToken;

🧑‍⚖️ Use it in routes:
const authenticateToken = require('./middleware/auth');

app.get('/api/profile', authenticateToken, (req, res) => {
  res.json({ message: `Hello ${req.user.name}` });
});

app.post('/api/update', authenticateToken, (req, res) => {
  // Only logged-in users can update data
});



Backend Guide : https://github.com/goldbergyoni/nodebestpractices


🧭 Backend concepts you should absolutely learn (beginner → advanced):
🔹 1. HTTP & REST basics
Methods (GET, POST, PUT, DELETE)

Status codes (200, 404, 401, 500)

Headers, query params, body

🔹 2. Authentication & Authorization
JWT (JSON Web Tokens)

Cookie-based sessions

Role-based access control (RBAC)

🔹 3. Middleware & Routing (Express, NestJS, etc.)
app.use(), req, res

Route-level and global middleware

🔹 4. Database integration
MongoDB / PostgreSQL / MySQL

ORMs like Prisma or Mongoose

Query optimization

🔹 5. CORS & Cross-origin requests

🔹 6. Error Handling
Centralized error middleware

Logging (Winston, Pino)

Custom error classes

🔹 7. File Uploads
Multer (Express)

Cloud storage (S3, Cloudinary)

🔹 8. Security Best Practices
Input validation

Rate limiting

Helmet / CSRF

🔹 9. Testing APIs
Postman

Jest / Supertest

🔹 10. API Design Principles
Versioning

Pagination

REST vs GraphQL


Update Local State Instead of Refetching After a Successful Update API Call

When running update api to updating some data in backend, instead of fetching new data to show latest data after update api, just change the old react state if data has been successfully updated. This will save us from calling fetch api after every update api.
❌ Inefficient Approach (Refetching Data)
const handleUpdate = async (updatedItem) => {
  const res = await updateItemAPI(updatedItem);
  if (res.success) {
    fetchData(); // Re-fetches all data again — not optimal
  }
};
✅ Recommended Approach (Update Local State)
const handleUpdate = async (updatedItem) => {
  const res = await updateItemAPI(updatedItem);
  if (res.success) {
    setData((prevData) =>
      prevData.map((item) =>
        item.id === updatedItem.id ? { ...item, ...updatedItem } : item
      )
    );
  }
};

✅ Benefits
Reduces API load by avoiding unnecessary data fetching
Improves performance, especially in large data sets
Provides instant feedback to the user
Keeps state management within React predictable and efficient
