Redux
Redux is a state management library for JavaScript applications (commonly used with React), especially when you have:
1. A lot of components sharing the same data
2. Complex or deeply nested state
3. A need for predictable, centralized state management

📦 Redux Toolkit (Simplified Redux)
Redux Toolkit is now the standard way to use Redux, because it Reduces boilerplate, provides a better developer experience and includes createSlice, configureStore, etc.
https://github.com/69JINX/FrontEnd/blob/main/Notes/Notes_Pic/Redux1.png
https://github.com/69JINX/FrontEnd/blob/main/Notes/Notes_Pic/Redux2.png

Slice
a slice represents a self-contained piece of the application's state that is managed by a specific reducer. Slices help break down the large, global Redux state object into smaller, more manageable pieces. Each slice typically corresponds to a specific feature or domain of your application. 

Store
The store is where we include all redux slices
It is the central container that holds the entire application state(slices). It's a JavaScript object with a few special functions that make it different from a plain global object. The store's main purpose is to manage the state and allow actions to be dispatched to modify it. 


>> npm install @reduxjs/toolkit react-redux

counterSlice.js

import { createSlice } from "@reduxjs/toolkit";

const initialValue = {
    value: 0,
    loading: false,
    error: null
}

export const counterSlice = createSlice({
    name: 'products', // name of slice
    initialState: initialValue,
    reducers: {   	 // Functions will be defined in this reducer object that update the state(initialValue) in response to actions
        increment: (state, action) => { state.value += 1 },  // action is the parameter which will be send in the dispatch function
        decrement: (state, action) => { state.value -= 1 },  // state represents the initialValue (updating the value with this function)
        incrementByAmount: (state, action) => {
            state.value += action.payload;
        }
    }
})
export const { increment, decrement, incrementByAmount } = counterSlice.actions; // export the reducers
export default counterSlice.reducer;

In Redux, the only legal way to update the state is through reducers 
You can’t do this:
initialValue.value = 10; // ❌ will NOT update Redux state
But you can do this:
dispatch({ type: 'incrementByAmount', payload: 10 }); // ✅ Triggers reducer, Classic Redux
or
dispatch(incrementByAmount(10)); 


Note : the reducer function does not support asynchronous tasks (eg. async-await) so we can't fetch some data from api and update the slice state according to that api data. That's where we need to use Redux Thunk. It support asynchronous tasks like api fetching and etc.

store.js
import { configureStore } from '@reduxjs/toolkit';
import counterSlice from './slices/counterSlice';

export const store = configureStore({
    reducer: {
        products: counterSlice,
    },
});

Wrap the children in layout.js in Redux Provider :
 import { Provider } from 'react-redux'
 <Provider store={store}>
   {children}
 </Provider>
 
the above code will force you to use 'use client' and remove metadata from layout.js (which is a server component).
The Redux <Provider> is a Client Component, and when you wrap your RootLayout with it, the whole file becomes a Client Component — which disables: export const metadata & the benefits of server components (streaming, SSR performance, etc.)

To fix this issue & avoid breaking SSR + metadata, you should not wrap the entire RootLayout (layout.js) in Redux <Provider>. Instead leave layout.js as server component & Wrap your main app/page shell (like AppProvider.js) in Redux provider as a Client Component.
FileStructure :
.
└── app/
    ├── layout.js              ← server component (no 'use client')
    ├── page.js                ← still server-rendered
    └── providers/
        └── redux-provider.js    ← client component
    
app/layout.js (Server Component — SSR + metadata safe)
import ReduxProvider from "./providers/redux-provider";
 <ReduxProvider>
    {children}
 </ReduxProvider>
 
providers/redux-provider.js (Client Component)
'use client';
import { Provider } from 'react-redux';
import { store } from '@/store';

export default function ReduxProvider({ children }) {
  return <Provider store={store}>{children}</Provider>;
}


Use Redux state in any Component
App.jsx

'use client'
import { decrement, increment, incrementByAmount } from '@/slices/counterSlice'; 
import { useDispatch, useSelector } from 'react-redux';


function App() {
  const count = useSelector(state => state.products.value);
  const dispatch = useDispatch();

  return (
    <div>
      <h1>Redux Counter</h1>
      <h2>{count}</h2>
      <button onClick={() => dispatch(increment())}>Plus</button>
      <button onClick={() => dispatch(decrement())}>Minus</button>
      <button onClick={() => dispatch(incrementByAmount(5))}>Plus by 5</button>
    </div>
  );
}

export default App

Thunk 
Redux Thunk is a Redux middleware used to handle asynchronous actions, making it a powerful tool for performing operations like fetching data from an API or any other asynchronous tasks. It allows action creators to return functions that can then be dispatched, enabling asynchronous logic within your Redux application. 
When working with Thunk, we need to create extraReducers in createSlice. You would use extraReducers when you are dealing with an action that you have already defined somewhere else.
reducers vs extraReducers : https://stackoverflow.com/questions/66425645/what-is-difference-between-reducers-and-extrareducers-in-redux-toolkit

counterSlice.js (with Thunk):

import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import axios from "axios";

export const generateRandomNumber = createAsyncThunk(
    'products/generateRandomNumber',
    async (_, thunkApi) => {
        try {
            const response = await axios.get('/api/random-number');
            return response.data; // returning data so builders can access it, this line "state.value = action.payload" won't work if data doesn't return
        }
        catch (error) {
            console.log(error);
            return thunkApi.rejectWithValue(error.message);
        }
    }
)

const initialValue = {
    value: 0,
    loading: false,
    error: null
}

export const counterSlice = createSlice({
    name: 'products', // name of slice
    initialState: initialValue,
    reducers: {   	 // Functions will be defined in this reducer object that update the state(initialValue) in response to actions
        increment: (state, action) => { state.value += 1 },  // action is the parameter which will be send in the dispatch function
        decrement: (state, action) => { state.value -= 1 },  // state represents the initialValue (updating the value with this function)
        incrementByAmount: (state, action) => {
            state.value += action.payload;
        }
    },
    extraReducers: (builder) => {   // extraReducers for Thunk
        builder
            .addCase(generateRandomNumber.pending, (state, action) => {     // when api is pending
                state.loading = true;
            })
            .addCase(generateRandomNumber.fulfilled, (state, action) => {   // when api is fulfilled
                state.loading = false;
                state.value = action.payload;
            })
            .addCase(generateRandomNumber.rejected, (state, action) => {    // when api return error (500,400 etc)
                state.loading = false;
                state.error = action.payload
            })
    }
})
export const { increment, decrement, incrementByAmount } = counterSlice.actions; // export the reducers
export default counterSlice.reducer;

App.jsx :
<button onClick={() => dispatch(generateRandomNumber())}>Generate Random Number</button>
