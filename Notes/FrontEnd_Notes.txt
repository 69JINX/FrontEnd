Advanced Javascript Crash Course => https://www.youtube.com/watch?v=R9I85RhI7Cg (Below Notes are created from this video, most of the topic are left like prototype/inheritance/class/iterables & iterators/generators because they are not necessary etc)

Scope
1. Block scope - variables declared inside a pair of curly braces cannot be accessed from outside
the block
2. Function scope - variables declared inside a function cannot not be accessed from outside the
function
3. Global scope - globally scoped variables can be accessed inside a block or function

eg. Block Scope :
{
  const x = 123;
  console.log(x); // 123
}
console.log(x) // Error : 'x' is not defined


Closure
In JavaScript, when we return a function from another function, we are effectively returning a combination of the function definition along with the function's scope. This would let the function definition have an associated persistent memory which could hold on to live data between executions. That combination of the function and its scope chain is what is called a closure in JavaScript.

scenario 1 :
const outer = ()=>{
    let counter = 0;
    const inner =()=>{
        counter++;
        console.log(counter);
    }
    inner();
}

outer();// counter set to 0
outer();// counter set to 0 again and increased by 1 by inner() function, because it was only called one time in the outer function.

Output : 
1
1

scenario 2 (Closure) :
// Define a function `outer` which declares a local variable `counter`
const outer = () => {
    let counter = 0; // `counter` is scoped to the `outer` function

    // Define an inner function that increments and logs `counter`
    const inner = () => {
        counter++;               // Increase the value of counter
        console.log(counter);    // Print the updated value
    }

    // Return the `inner` function from `outer`
    return inner; // This forms a closure: `inner` "remembers" `counter`
}

// Call `outer` and store its return value (which is the `inner` function) in `fun1`
const fun1 = outer(); // Here, `counter` is initialized to 0 and `fun1` holds reference to `inner`

fun1(); // Logs: 1
// - `counter` is incremented from 0 to 1
// - Because `inner` still "remembers" its outer `counter`, the state persists

fun1(); // Logs: 2
// - `counter` is now incremented again (1 → 2)
// - The same closure is being used, so the same `counter` variable is being updated

// Note:
// Even though `outer` has finished execution, `counter` isn't garbage collected
// because the returned `inner` function (stored in `fun1`) still has access to it.
// This behavior is called a "closure" — where a function remembers its lexical scope.

// both fun1 are still running inside the outer function and counter never convereted to 0 again, which caused the counter to increased two times

Output : 
1
2


Function Currying
Currying is a process in functional programming in which we transform a function with multiple
arguments into a sequence of nesting functions that take one argument at a time.
Currying in JavaScript transforms a function with multiple arguments into a sequence of functions, each taking a single argument. This technique offers several benefits:
1. Code Reusability: Curried functions can be reused in various contexts. By partially applying arguments, new functions can be derived from existing ones, reducing code duplication.
2. Improved Readability: Breaking down complex logic into smaller, manageable pieces makes the code easier to understand and maintain.
3. Enhanced Flexibility: Currying enables more flexible function composition. Functions can be combined and reused in different ways, adapting to changing requirements. 
4. Partial Application: Currying facilitates partial application, allowing you to create specialized functions by fixing some arguments of a more general function.
5. Functional Programming: Currying promotes functional programming practices, leading to more robust and maintainable code.
6. Simplified Function Calls: By pre-filling some arguments, function calls can be simplified, making code more concise.
7. Avoid Repetition: Currying helps avoid repeating the same arguments multiple times, making code more streamlined.
8. Higher-Order Functions: Currying enables the creation of higher-order functions, enhancing the flexibility and power of your code.
function f(a,b,c) is transformed to f(a)(b)(c)

1. Without Currying
function logMessage(prefix, message) {
  console.log(`[${prefix}] ${message}`);
}

// Usage
logMessage("INFO", "Server started");
logMessage("ERROR", "Something went wrong");
You have to repeat "INFO" or "ERROR" every time you call it — no reusability.

2. With Currying
function curriedLog(prefix) {
  return function(message) {
    console.log(`[${prefix}] ${message}`);
  }
}

// Usage
const infoLogger = curriedLog("INFO");
const errorLogger = curriedLog("ERROR");

infoLogger("Server started");        // [INFO] Server started
errorLogger("Something went wrong"); // [ERROR] Something went wrong


this
The JavaScript this keyword which is used in a function, refers to the object it belongs to. It makes functions reusable by letting you decide the object value. this value is determined entirely by how a function is called
How to determine 'this'?
1. Implicit binding
2. Explicit binding
3. New binding
4. Default binding

1. Implicit binding : Implicit binding in JavaScript refers to how the this keyword is automatically set within a function based on how the function is called. Specifically, when a function is invoked as a method of an object using dot notation (object.method()), the this keyword inside the function will refer to that object.

const myObject = {
  value: 10,
  myMethod: function() {
    console.log(this.value); // 'this' refers to myObject
  }
};

myObject.myMethod();  // Output: 10

2. Explicit binding :
Explicit binding in JavaScript refers to the ability to manually set the this value within a function, giving you direct control over the execution context. This is particularly useful when you need a function to operate on a specific object, regardless of how it's called. This is achieved using the call(), apply(), or bind() methods, providing direct control over the object that this references.

const person = {
    name : 'Ram'
}
function greet(){
    console.log(`Hello ${this.name}`); // Output : Hello Ram
}
greet.call(person);
Note : This won't work with arrow functions, because Arrow functions do not have their own this.Instead, they inherit this from the surrounding (lexical) scope.

3. New binding :
In JavaScript, the new keyword is used to create instances of objects from constructor functions or classes. When a function is invoked with the new keyword, a new object is created and the function is then called with this bound to that new object. This is known as "new binding".

In js, we can invoke a function with the 'new' keyword and in such a scenario, the function is invoked with 'this' keyword referencing an empty object (this = {})
We are not creating this empty object, the 'new' keyword internally does this when Person function is invoked with 'new' keyword.
So "When a function is invoked with the 'new' keyword, within the function, 'this' keyword will always reference a new empty object."
 So consider a function called 'Person', which accepts a name. Within the function, we said this.name = name. With this function we can now create multiple persons or people passing in different names each time.

function Person(name){
     this.name = name; // this = {} , 'this' represents an empty object
}			// you can now add properties to this empty object using dot notation

const p1 = new Person('Ram');
const p2 = new Person('Shyam'); // these functions are called constructor function as we can create multiple persons from the main Person function

console.log(p1.name, p2.name); // Ram Shyam

4. Default Binding : 
In JavaScript, default binding is one of the ways the 'this' keyword is determined within a function. It occurs when a function is called as a standalone function, without any specific object context.
Default binding is the fallback mechanism for this binding. Other binding rules, such as implicit binding (when calling a method on an object), explicit binding (using call, apply, or bind), and the new keyword, take precedence over default binding.
This means that if a function is called without any explicit context, this will refer to the global object (in non-strict mode) or be undefined (in strict mode).
function myFunction() {
  console.log(this);
}

myFunction(); // In non-strict mode, this will log the global object (window in browsers). In strict mode, this will log undefined.

example : 
console.log(this.name); // Output : undefined
// js will try to find name in the global scope, if it doesn't find any then it will print undefined. 

let's set name in the global scope :
// const name = 'Ram'; // since it is node, not a browser so we will define like below
globalThis.name = 'Ram'; // this will set name in global scrope
console.log(this.name); // Output : Ram

example : 

globalThis.name = "Ram" // accessible globally across files/modules in the Node.js runtime
this.name = 'Avinash';  // At the top level of a Node.js module, this refers to the module.exports object, not the global object. A local object representing the current CommonJS module

function fun1 (){
    console.log(this.name)  // Output : Ram
    console.log(this) // global object (global functions and keys)
}
fun1()

console.log(this.name) // Output : Avinash
console.log(this) // Output : { name: 'Avinash' }
explaination of the above code : https://github.com/69JINX/FrontEnd/blob/main/Notes/Notes_Pic/this%20and%20global%20scope.png

Order of precedence :
1. New binding
2. Explicit binding
3. Implicit binding
4. Default binding
