👉🏻Event Loop
It is a C program and is part of libuv. A design pattern that orchestrates or co-ordinates the execution of synchronous and asynchronous code in Node.js. 
https://dev.to/rajatoberoi/understanding-the-event-loop-callback-queue-and-call-stack-in-javascript-1k7c

The event loop in JavaScript is a fundamental mechanism that enables asynchronous, non-blocking behavior despite JavaScript's single-threaded nature. It is the core component that manages how code execution, asynchronous operations, and user interactions are handled.

Here's how it works:
-> Call Stack:
JavaScript executes code in a single-threaded environment, meaning it processes one task at a time. Synchronous code is pushed onto the call stack and executed sequentially.
-> Web APIs (Browser) / C++ APIs (Node.js):
When an asynchronous operation, such as a setTimeout, fetch request, or an event listener, is encountered, it's offloaded to the browser's Web APIs (or Node.js's C++ APIs). These APIs handle the asynchronous task in the background.
-> Callback Queue (Task Queue/Macrotask Queue):
Once an asynchronous operation completes, its associated callback function is placed in the callback queue (also known as the task queue or macrotask queue).
-> Microtask Queue:
There's also a separate queue for microtasks, such as Promises and queueMicrotask. Microtasks have higher priority and are executed before macrotasks.
-> The Event Loop:
   The event loop continuously monitors two things:
   1. The Call Stack: It checks if the call stack is empty.
   2. The Callback Queues: If the call stack is empty, it first checks the microtask queue. If there are microtasks, it moves them to the call stack for execution until the microtask queue is empty. Then, it checks the macrotask queue and, if there are tasks, moves one (or more, depending on the environment) to the call stack for execution. 

This continuous cycle ensures that while long-running asynchronous operations are being handled in the background, the main thread remains responsive and can process other tasks, including user interactions, without blocking the entire application.

Cohort 2.0 (Harkirat) => Week 2.1 – Revision of Async (Timestamp : 00:41:27) [The best explanation]
https://drive.google.com/file/d/1zDFu1_pVbOA4GL6Ow51qhB22pUCDocz-
https://www.youtube.com/watch?v=L18RHG2DwwA
https://wearecommunity.io/communities/aep-js-community/articles/2893

//insert image Event_loop_priority.png from FrontEnd/Notes/Notes_Pic

Event loop is a loop that is alive as long as your application is up and running.
In every iteration of loop, we come across 6 different queues. Each queue hold one or more callback functions that need to be eventually executed on the callstack. And offcourse, the type of callback functions are different for each queue.

1st we have timer queue, this contains callback associated with setTimeout & setInterval.
2nd we have I/O queue, this contains callback associated with all the async methods eg. fs & https methods
3rd we have check queue, this contains callback associated with a function called setImmediate. This function is specific to node and and is not something you would come across when writing javascript for the browser 
4th we have the close queue, this contains callbacks associated with the close event of an async task.
Finally we have Microtask queue at the center. This is actually 2 seperate queues. The 1st queue is called nextTick queue and contains callbacks associated with a function called process.nextTick, which is a Node.js-specific function. The 2nd queue is the promise queue which contains callbacks that are associated with the native promise in javascript.

One very important point to note is that (1)timer queue, (2)I/O queue, (3)check queue and (4)close queue are all part of libuv. The 2 microtasks are however not part of libuv. Hopefully they still the part of node runtime and play an important role in the order of execution of callbacks.

Event Loop - Execution Order
User written synchronous JavaScript code takes priority over async code that the runtime would like to execute
Only after the call stack is empty, the event loop comes into picture


Event Loop - Execution Order
1. Any callbacks in the micro task queues are executed. First, tasks in the nextTick queue and only then tasks in the promise queue
2. All callbacks within the timer queue are executed
3. Callbacks in the micro task queues if present are executed. Again, first tasks in the nextTick queue and then tasks in the promise queue
4. All callbacks within the I/O queue are executed
5. Callbacks in the micro task queues if present are executed. nextTick queue followed by Promise queue.
6. All callbacks in the check queue are executed
7. Callbacks in the micro task queues if present are executed. Again, first tasks in the nextTick queue and then tasks in the promise queue
8. All callbacks in the close queue are executed
9. For one final time in the same loop, the micro task queues are executed. nextTick queue followed by promise queue.

If there are more callbacks to be processed, the loop is kept alive for one more run and the same steps are repeated
On the other hand, if all callbacks are executed and there is no more code to process, the event loop exits.
This is the role libuv's event loop plays in the execution of async code of nodejs

Node.js Event Loop Phases (Simplified)
1. Timers Phase — runs setTimeout, setInterval callbacks
2. Pending Callbacks Phase — handles system-level callbacks (not common)
3. Poll Phase — I/O callbacks are executed. This is a crucial phase where the event loop retrieves new I/O events (like network or file system events) and executes their corresponding callbacks. It can block here if there are no pending I/O events and no timers/immediate callbacks to process.
4. Check Phase — runs setImmediate callbacks
5. Close Callbacks Phase — e.g., socket.on('close')

Between each phase, microtasks run:
  -> process.nextTick
  -> Promise.then, queueMicrotask

Microtask vs Macrotask
microtasks and macrotasks represent different categories of asynchronous operations with distinct priorities and execution orders.

Macrotasks (Tasks):
- Macrotasks are the primary units of work processed by the event loop.
- They include larger, less time-sensitive operations like:
	- Timers (e.g., setTimeout, setInterval)
	- I/O operations (e.g., file system operations, network requests)
	- UI rendering (in browser environments, not directly applicable to Node.js's core event loop)
- The event loop processes one macrotask at a time. After executing a macrotask, it then checks and clears the microtask queue before proceeding to the next macrotask in the queue.

Microtasks:
- Microtasks are smaller, higher-priority asynchronous operations that are executed immediately after the current macrotask completes and before the next macrotask is picked up.
- They are designed for operations that need to be completed as quickly as possible without yielding to the event loop for a full cycle.
- Examples of microtasks include:
	- Promise callbacks (.then(), .catch(), .finally())
	- process.nextTick() (Node.js specific)
	- MutationObserver callbacks (in browser environments)
- The microtask queue is fully drained before the event loop moves on to the next macrotask. This means a microtask can enqueue other microtasks, and all of them will be executed before the next macrotask cycle.

Key Differences Summarized:
- Priority: Microtasks have a higher priority than macrotasks.
- Execution Order: Microtasks are executed after the current macrotask and before the next macrotask. Macrotasks are executed one at a time, with a full microtask queue clear between each. 
- Use Cases: Macrotasks are suitable for longer-running, less urgent asynchronous operations, while microtasks are for immediate, high-priority asynchronous tasks that need to run in the same "tick" as the current operation.

Few Questions

Que. Whenever an async task completes in libuv, at what point does Node decide to run the associated callback function on the call stack?
And. Callback functions are executed only when the call stack is empty. The normal flow of execution fill not be interrupted to run a callback function

Que. What about async methods like setTimeout and setinterval which also delay the execution of a callback function?
Ans. setTimeout and setinterval callbacks are given first priority

Que. If two async tasks such as setTimeout and readFile complete at the same time, how does Node decide which callback function to run first on the call stack?
And. Timer callbacks are executed before I/O callbacks even if both are ready at the exact same time

How do we 'queue up' a callback function on each of these queues :
In Microtask Queue :

The microtask queue in the Node.js Event Loop fundamentally consists of two distinct queues:
1. process.nextTick() queue:
This queue holds callbacks scheduled using process.nextTick(). These callbacks are executed with the highest priority, even before any other microtasks or macrotasks are processed within the current phase of the event loop.
2. Promise queue:
This queue contains callbacks associated with JavaScript Promises (e.g., then(), catch(), finally()). These callbacks are executed after process.nextTick() callbacks but before the event loop moves to the next phase (e.g., timers, I/O).

Therefore, while the term "microtask queue" is often used singularly, it encompasses these two separate, prioritized queues within the Node.js event loop's microtask handling mechanism.

1. nextTick queue : 
to queue a callback function in nextTick queue, we use a build in process.nextTick function
syntax :
process.nextTick(()=>{
  console.log('this is process.nextTick');
})
process.nextTick : 
process.nextTick() in Node.js is a function that schedules a callback to be executed immediately after the current operation on the call stack completes, but before the Node.js Event Loop proceeds to its next phase (e.g., timers, I/O, check). 
Use nextTick() when you want to make sure that in the next event loop iteration that code is already executed.
Here's a breakdown of its key characteristics and uses:
- Immediate Execution:
Callbacks passed to process.nextTick() are prioritized and executed as soon as the current JavaScript execution context finishes, even before any setTimeout() or setImmediate() callbacks are processed.
- Microtask Queue:
process.nextTick() callbacks are placed in a special queue called the "nextTick queue" or "microtask queue," which is processed before other event loop phases.
- Non-Blocking for the Current Operation:
While it executes quickly, it doesn't block the current operation from completing. It simply ensures its callback runs next.

Use Cases:
- API Development: It's often used in API design to allow users to attach event handlers after an object has been constructed but before any I/O operations have occurred, ensuring consistency. 
- Error Handling: It can be used to defer error handling or cleanup operations, ensuring they run after the immediate task finishes.
- Preventing I/O Starvation: In some specific scenarios, it can help prevent I/O operations from being starved if a long-running synchronous task is followed by many I/O-dependent operations, by allowing critical tasks to be processed sooner.

While process.nextTick() offers high priority, excessive or recursive use of it can potentially "starve" the event loop, preventing other events (like I/O) from being processed, leading to performance issues. It should be used judiciously for specific, high-priority tasks.

Use of process.nextTick is discouraged as it can cause the rest of the event loop to starve
If you endlessly call process.nextTick. the control will never make it past the microtask queue

Two main reasons to use process.nextTick
1. To allow users to handle errors, cleanup any then unneeded resources, or perhaps try the request again before the event loop continues
2. To allow a callback to run after the call stack has unwound but before the event loop continues

2. Promise queue
Promise queue come into play when promises are resolved (using then-catch or async await)
Promise.resolve().then(()=>console.log("This is promise")); // or any api that returns a promise

Experiment 1 : All user written synchronous JavaScript code takes priority over async code that the runtime would like to eventually execute
console.log("console.log 1");
process.nextTick(() => console.log("this is process.next 1"));
console.log("console.log 2");
output : 
console.log 1
console.log 2
this is process.next 1

Experiment 2 : All callbacks in nextTick queue are executed before callbacks in promise queue
Promise.resolve().then(()=>console.log("This is promise"));
process.nextTick(()=>console.log("This is nextTick"))
output : 
This is nextTick
This is promise

Experiment 3 : nested callbacks gets added at the end of the queue
process.nextTick(() => console.log("this is process.nextTick 1"));
process.nextTick(() => {
  console.log("this is process.nextTick 2");
     process.nextTick(() =>
	console.log("this is the inner next tick inside next tick") //  even though it's nested, it’s queued after the current nextTick() callbacks finish.
     );
});
process.nextTick(() => console.log("this is process.nextTick 3"));
Promise.resolve().then(() => console.log("this is Promise.resolve 1"));
Promise.resolve().then(() => {
  console.log("this is Promise. resolve 2");
     process.nextTick(() =>
	console.log("this is the inner next tick inside Promise then block") // that nextTick() is not executed immediately—it gets pushed to the next round of the nextTickQueue. Because the control is still in the promise queue, it will complete all the promises first
     );
});
Promise.resolve().then(() => console. log("this is Promise.resolve 3"));

output : 
this is process.nextTick 1
this is process.nextTick 2
this is process.nextTick 3
this is the inner next tick inside next tick
this is Promise.resolve 1
this is Promise. resolve 2
this is Promise.resolve 3
this is the inner next tick inside Promise then block

Doubt : 
Why the nested process.nextTick inside the 2nd nextTick is queued for the next round. Why it couldn't execute right away inside the 2nd process.nextTick, while the control was inside the 2nd process.nextTick
Ans : 
process.nextTick() doesn’t recursively drain the queue during execution.
🔁 Node.js processes nextTick queue like this:
1. Collect all scheduled process.nextTick() calls into a queue.
2. Start executing them one by one in order of scheduling.
3. While one callback is executing, any new nextTick() call is added to the same queue, but after the currently executing batch finishes.
Node.js does not allow infinite recursion by immediately executing nested nextTick()s within the current tick — doing so would block the event loop forever.
🔄 Queue Execution Flow:
1. [ nextTick 1, nextTick 2, nextTick 3 ]
2. During execution of nextTick 2, we schedule:
[ nextTick 1, nextTick 2, nextTick 3 ]  // running
                         ↑
		schedules → [ inner nextTick ]
3. So the queue becomes:
[ nextTick 3, inner nextTick ]


🧱 Why this behavior is intentional:
- Prevents infinite loops and starvation of I/O / other microtasks.
- Node.js drains the nextTick queue once per phase, then moves to Promises and other microtasks, allowing a fair execution balance.

🗣️ Analogy:
Think of process.nextTick() like queuing people to speak at a mic:
1. You schedule a few to speak (1, 2, 3).
2. While 2 is speaking, they nominate someone else.
3. That new speaker goes to the back of the line, not straight to the mic.


In Timer Queue : 

In Node.js, the Timer Queue is a part of the Event Loop that handles asynchronous operations related to time. 
Timer queue is not a queue but a min-heap data structure but thinking it as a queue makes the process simpler
The primary functions used to interact with the Timer Queue are:
-> setTimeout() - clearTimeout()
-> setInterval() - clearInterval()

Experiment 4 : Callbacks in the microtasks queues are executed before callbacks in the timer queue.
The order of priority in the below program is nextTick queue than promise queue than timer queue
setTimeout(()=>console.log("this is setTimeout 1"),0)
setTimeout(()=>console.log("this is setTimeout 2"),0)
setTimeout(()=>console.log("this is setTimeout 3"),0)
process.nextTick(() => console.log("this is process.nextTick 1"));
process.nextTick(() => {
  console.log("this is process.nextTick 2");
     process.nextTick(() =>
	console.log("this is the inner next tick inside next tick")
     );
});
process.nextTick(() => console.log("this is process.nextTick 3"));
Promise.resolve().then(() => console.log("this is Promise.resolve 1"));
Promise.resolve().then(() => {
  console.log("this is Promise. resolve 2");
     process.nextTick(() =>
	console.log("this is the inner next tick inside Promise then block")
     );
});
Promise.resolve().then(() => console. log("this is Promise.resolve 3"));

output : 
this is process.nextTick 1
this is process.nextTick 2
this is process.nextTick 3
this is the inner next tick inside next tick
this is Promise.resolve 1
this is Promise. resolve 2
this is Promise.resolve 3
this is the inner next tick inside Promise then block
this is setTimeout 1
this is setTimeout 2
this is setTimeout 3

Experiment 5 : Callbacks in the microtask queue are executed in between the execution of callbacks in the timer queue

setTimeout(()=>console.log("this is setTimeout 1"),0)
setTimeout(()=>{
   console.log("this is setTimeout 2");
   process.nextTick(() => // this is queued in the microtask queue and won't run right away
	console.log("this is the inner next tick inside setTimeout 2")
     );
},0) // after completion of this callback, event loop goes to microtask queue (because as we have learned, after every callback execution, the event loop goes back and checks microtask queue
setTimeout(()=>console.log("this is setTimeout 3"),0)

process.nextTick(() => console.log("this is process.nextTick 1"));
process.nextTick(() => {
  console.log("this is process.nextTick 2");
     process.nextTick(() =>
	console.log("this is the inner next tick inside next tick")
     );
});
process.nextTick(() => console.log("this is process.nextTick 3"));
Promise.resolve().then(() => console.log("this is Promise.resolve 1"));
Promise.resolve().then(() => {
  console.log("this is Promise. resolve 2");
     process.nextTick(() =>
	console.log("this is the inner next tick inside Promise then block")
     );
});
Promise.resolve().then(() => console. log("this is Promise.resolve 3"));

output : 
this is process.nextTick 1
this is process.nextTick 2
this is process.nextTick 3
this is the inner next tick inside next tick
this is Promise.resolve 1
this is Promise. resolve 2
this is Promise.resolve 3
this is the inner next tick inside Promise then block
this is setTimeout 1
this is setTimeout 2
this is the inner next tick inside setTimeout 2
this is setTimeout 3

In I/O Queue : 
Most of the async methods from the built-in modules queue the callback function in the I/O queue.
Note : There is no separate "I/O queue" phase in the Node.js event loop instead everything related to I/O happens inside I/O polling which we are discussing in the next topic.

Experiment 6 : Callbacks in the microtask queues are executed before callbacks in the I/O queue
const fs = require("fs");
fs.readFile(__filename, () => {
   console.log("this is readFile 1");
})
process.nextTick(() => console.log("this is process.nextTick 1"));
Promise.resolve().then(() => console.log("this is Promise.resolve 1"));

output :
this is process.nextTick 1
this is Promise.resolve 1
this is readFile 1

Experiment 7 : When running setTimeout with delay 0ms and an I/O async method, the order of execution can never be guaranteed
const fs = require("fs");

setTimeout(() => console.log("this is setTimeout 1"), 0);

fs.readFile(__filename, () => {
  console.log ("this is readFile 1");
});
output : 
>> node index.js
this is readFile 1
this is setTimeout 1
>> node index.js
this is setTimeout 1
this is readFile 1
>> node index.js
this is readFile 1
this is setTimeout 1

Why can the order of execution never be guaranteed ?
https://github.com/69JINX/FrontEnd/blob/main/Notes/Notes_Pic/IOqueueWithTimerqueue.png

I/O Polling: 
In Node.js, I/O polling is part of the event loop's I/O phase. When asynchronous operations like file reads or network requests are initiated, the OS handles them. The event loop then polls to check if any of those operations are complete. Once completed, the associated callback is pushed into the callback queue to be executed in the appropriate phase.

In Node.js, I/O polling happens during a part of the event loop called the I/O phase.
When you run something like reading a file or making a network request, Node.js asks the operating system (OS) to handle that task in the background.
While the OS is working on it, Node.js doesn’t stop — it keeps doing other things. Then, during the I/O phase, Node.js checks (polls) to see if those background tasks are finished.
If a task is done, Node.js adds its callback function to a queue so it can be run soon after.


fs.readFile("file.txt", () => {
  console.log("File is read!");
});

> The OS reads the file in the background.
> Node.js checks during the I/O phase if it’s done.
> When it’s ready, it runs your console.log() callback.

✅ There is no separate "I/O queue" phase in the Node.js event loop.
 Here's what actually exists:
1. I/O Polling
 - Happens in the Poll Phase of the event loop.
 - This is where Node.js:
	- Waits for I/O (file reads, network requests, etc.) to complete
	- Executes callbacks for completed I/O events

[Timers] → [Pending Callbacks] → [Poll] → [Check] → [Close Callbacks]
	
❌ What's not true:
"I/O queue" as a distinct named queue or phase in the event loop
➡️ This doesn't exist in the Node.js event loop diagram.	

✅ But there is a kind of internal queue:
- Even though we don't call it “I/O queue” officially, internally, Node.js does:
- Keep track of I/O events waiting to be processed
- When an I/O completes (like a file read), the corresponding callback is registered to be executed in the poll phase
So you could say: "There’s no separate I/O queue phase, but internally, completed I/O callbacks are managed and processed in the poll phase."

🧠 Analogy:
Think of it like this:
- Poll phase is the I/O handler
- Internally, it has access to a list of "I/O callbacks that just finished"
- It runs them in this phase — no need for a separate “I/O queue” phase like “Timers” or “Check”



To queue a callback function into the check queue, we can use a function called setImmediate.
setImmediate(() => {
  console.log( "this is setImmediate 1")
})

Experiment 9 : check queue runs before I/O queue if I/O queue is empty
const fs = require("fs");

fs.readFile(__filename, () => { 	// if we used readFileSync instead, whole below code will be blocked until the file is read. 
  console. log("this is readFile 1");  // ex : const data = fs.readFileSync(__filename, 'utf-8');
});

process.nextTick(() => console.log("this is process.nextTick 1"));
Promise.resolve().then(() => console.log("this is Promise.resolve 1"));
setTimeout(() => console.log("this is setTimeout 1"), 0);
setImmediate(() => console.log("this is setImmediate 1"));

for (let i = 0; i < 2000000000; i++) {}
output :
this is process.nextTick 1
this is Promise.resolve 1
this is setTimeout 1
this is setImmediate 1
this is readFile 1

Why check queue (setImmediate) ran before I/O queue (readFile) even though the cheque comes after the i/o queue in event loop ?

Imagine this :
fs.readFile("file.txt", () => {
  console.log("file read");
});
When Node reaches the Poll phase, if the file is already read (I/O is complete), the callback will run right away in this phase.
If not, Node will wait (poll) until the I/O is done.
This polling means: "Wait until the OS tells us the file is read, or there’s some data ready."
So, it blocks in this phase only if there are no setTimeout, setImmediate, or other things scheduled. If there are tasks ready in other phases, Node won’t wait too long.

✅ Here's the timeline step-by-step:
1. fs.readFile(__filename) is triggered:
  -> It asks the OS to read a file asynchronously.
  -> The callback is registered to be run later, once the OS completes the read.
2. Microtasks run:
  -> process.nextTick → logs
  -> Promise.resolve().then → logs
3. Timers Phase:
  -> setTimeout(0) → logs
4. Poll Phase:
  -> Node enters the Poll phase.
  -> It checks if any I/O is complete:
  -> Your file has not finished reading yet. It's still in progress.
  -> Poll queue is empty.
  -> Since there’s nothing else to do and setImmediate is waiting...
5. Node jumps to Check Phase:
  -> Runs setImmediate() → logs
6. Meanwhile, file reading completes
  -> Callback for fs.readFile is queued to run in the next loop’s Poll phase.
  -> Then fs.readFile callback → logs
  
So the reason is:
The I/O operation hadn't finished yet during the Poll phase because the File reading is done by the OS, not Node
Since setImmediate() was waiting in the Check Phase, Node said:
“Let’s not wait here in Poll. Let’s move on and run setImmediate.”

Inference : I/O events are polled and callback functions are added to the I/O queue only after the I/O is complete

In Check queue :
